#!/bin/bash

# Script to backup postgresql containers
# When no args are specified, it will try to guess the settings

_RED='\033[0;31m'
_NC='\033[0m'

function _show_usage()
{
  echo "$0 --container [container] --name [db_name] --user [db_user]"
}

function _show_error()
{
  echo -e "${_RED}${1}${_NC}" 1>&2
}

function _debug()
{
  if [[ "$DEBUG" -eq 1 ]]; then
    echo "$1"
  fi
}

function _backup()
{
  if [[ -z "$_DB_NAME" ]]; then
	  echo "No database specified, fetching local config file"
    # shellcheck disable=SC1091
	  if source .env 2>/dev/null; then
	    _debug "from env file: $POSTGRES_DB"
	    _debug "from env file: $POSTGRES_USER"
	  fi
	  if [[ -z "$POSTGRES_DB" || -z "$POSTGRES_USER" ]];then
		  _show_error "Cannot guess DB name or user"
		  _show_usage
		  exit 2
	  fi

    _DB_NAME=$POSTGRES_DB
    _DB_USER=$POSTGRES_USER
  fi


  if [[ -z $_CONTAINER ]]; then

    echo "No container specified, guessing container name"
    _CONTAINER=$(docker ps --format "{{.Names}}"|grep postgres)

	  if [[ -z "$_CONTAINER" ]]; then
		  _show_error "Cannot find a matching container"
		  _show_usage
		  exit 1
	  fi
	  if [[ "$_CONTAINER" == *$'\n'* ]]; then
		  _show_error "Found multiple Postgres containers:"
		  _show_error "$_CONTAINER"
		  _show_error "Please choose one"
		  _show_usage
		  exit 1
	  fi
  fi

  _BACKUP_NAME="$_CONTAINER-$(date +'%Y%m%d').backup"

  echo -e "Container:\t$_CONTAINER"
  echo -e "Database name:\t$_DB_NAME"
  echo -e "Databaser user:\t$_DB_USER"
  echo -e "Backup name:\t$_BACKUP_NAME"

  if [[ $_CONFIRM != 1 ]]; then
    echo -n "Is this ok?? [y/N]: "
    read -r continue
    if [[ ${continue} != "y" ]]; then
      echo "Opertion aborted" && exit 3;
    fi
  fi

  docker exec "$_CONTAINER" pg_dump -U "$_DB_USER" "$_DB_NAME" > "$_BACKUP_NAME"
}

while [[ $# -gt 0 ]]
do
  key="$1"
  case $key in
    -n|--name)
      _DB_NAME="$2"
      shift
      ;;
    -u|--user)
      _DB_USER="$2"
      shift
      ;;
    -c|--container)
      _CONTAINER="$2"
      shift
      ;;
    -y)
      _CONFIRM=1
      ;;
    -h|--help|help)
      _show_usage && exit 0
      ;;
    *)
      # unknown option
      _show_usage && exit 0
      ;;
  esac
  shift # past argument or value
done

if [[ -z $key ]]; then
	_show_usage && exit 0
fi
_backup
